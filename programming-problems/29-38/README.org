* Programming Problems 29-38
** problem29.cpp
Write a program that reads a file containing floating-point numbers.  Print the average of the numbers in the file.  Prompt the user for the file name.

*** Solution
#+NAME: problem29.cpp
#+begin_src C++ :results output :cmdline <<< 29-floats.txt :exports both
  #include <iostream>
  #include <fstream>
  using namespace std;

  double
  compute_avg_from_file(fstream *file_obj)
  {
    double total = 0;
    size_t count = 0;
    double num;
    while (*file_obj >> num) {
      total += num;
      ++count;
    }
    return total / count;
  }

  int
  main ()
  {
    fstream file_obj;
    string file_name;

    cout << "Welcome to Number Averager Program!\n"
         << "\n"
         << "This program computes the average of numbers in FILE.\n"
         << "Numbers in FILE may be delimited by any whitespace\n"
         << "character.\n"
         << "\n"
         << "Enter FILE: ";
    cin >> file_name;

    // Open the text file.
    file_obj.open(file_name, ios::in);
    if (file_obj.fail()) {
      cerr << "File failed to open.\n";
      exit(1);
    }

    // Compute and print result
    cout << "The average of numbers in '" << file_name
         << "' is: " << compute_avg_from_file(&file_obj)
         << '\n';

    file_obj.close();
    return 0;
  }
#+end_src

*** Sample output
Suppose ~29-floats.txt~ contains:

#+begin_example
3
5.6
23.1 4.7 4.2
#+end_example

The code will output:

#+begin_example
Welcome to Number Averager Program!

This program computes the average of numbers in FILE.
Numbers in FILE may be delimited by any whitespace
character.

Enter FILE: 29-floats.txt
The average of numbers in '29-floats.txt' is: 8.12
#+end_example

*** Resources
- https://stackoverflow.com/a/20372777

** problem30.cpp
Write a program that reads each line in a file, reverses its characters, and writes the resulting line to another file.  Suppose the user specifies ~input.txt~ and ~output.txt~ when prompted for the file names, and ~input.txt~ contains the lines

#+begin_example
Mary had a little lamb
Its fleece was white as snow
And everywhere that Mary went
the lamb was sure to go.
#+end_example

After the program is finished, ~output.txt~ should contain

#+begin_example
bmal elttil a dah yraM
wons sa etihw saw eceelf stI
tnew yraM taht erehwyreve dnA
.og ot erus saw bmal ehT
#+end_example

*** Solution
#+begin_src C++ :results output :cmdline :exports both
  #include <iostream>
  #include <fstream>
  #include <algorithm>
  using namespace std;

  void
  flip_text_file(fstream *file_obj, fstream *flipped_file_obj)
  {
    string line;
    while (getline(*file_obj, line)) {
      reverse(line.begin(), line.end());
      ,*flipped_file_obj << line << '\n';
    }
  }  

  int
  main ()
  {
    fstream file_obj;
    fstream flipped_file_obj;
    string file_name;
    string flipped_file_name;

    cout << "Welcome to Text Flipper Program!\n"
         << "\n"
         << "Horizontally flip a text file.\n"
         << "\n"
         << "Enter input FILE: ";

    // Open the text file for reading.
    cin >> file_name;		// Prompt for text file for reading.
    file_obj.open(file_name, ios::in);
    if (file_obj.fail()) {
      cerr << "File for reading failed to open.\n";
      exit(1);
    }

    // Open the text file for writing.
    cout << "Enter output FILE: ";
    cin >> flipped_file_name;		// Prompt for text file for writing.
    flipped_file_obj.open(flipped_file_name, ios::out);
    if (flipped_file_obj.fail()) {
      cerr << "File for writing failed to open.\n";
      exit(1);
    }

    // Notify user if done!
    flip_text_file(&file_obj, &flipped_file_obj);
    cout << "Flipping done! Please Check the file '"
         << flipped_file_name << "'.\n";

    // Cleanup
    file_obj.close();
    flipped_file_obj.close();
    return 0;
  }
#+end_src

*** Sample output
Suppose ~input.txt~ contains:

#+begin_example
Mary had a little lamb
Its fleece was white as snow
And everywhere that Mary went
the lamb was sure to go.
#+end_example

The code will output:

#+begin_example
Welcome to Text Flipper Program!

Horizontally flip a text file.

Enter input FILE: input.txt
Enter output FILE: output.txt
Flipping done! Please Check the file 'output.txt'.
#+end_example

And ~output.txt~ will contain:

#+begin_src shell
user@host:cpp $ cat reversed-mary-had.txt 
bmal elttil a dah yraM
wons sa etihw saw eceelf stI
tnew yraM taht erehwyreve dnA
.og ot erus saw bmal eht
#+end_src

*** Resources
- https://www.geeksforgeeks.org/read-a-file-line-by-line-in-cpp/?ref=asr5
- https://www.geeksforgeeks.org/how-to-reverse-a-string-in-cpp/

** problem31.cpp
Write a program that will search a file of numbers of type ~int~ and write the largest and the smallest numbers to the screen.  The file contains nothing but numbers separated line breaks.

*** Solution
#+begin_src C++
  #include <iostream>
  #include <fstream>
  using namespace std;

  int *
  find_min_max_in_file(fstream *file_obj)
  {
    int line;
    int *min_max_tuple = (int *)malloc(2 * sizeof(int));
    int highest;
    ,*file_obj >> highest;
    int lowest = highest;
    while (*file_obj >> line) {
      (highest < line) && (highest = line);
      (lowest > line) && (lowest = line);
    }
    min_max_tuple[0] = lowest;
    min_max_tuple[1] = highest;
    return min_max_tuple;
  }

  int
  main ()
  {
    fstream file_obj;
    string file_name;
    int *min_max;

    cout << "Welcome to Min-Max Program!\n"
         << "\n"
         << "Find the smallest and largest integer in FILE.\n"
         << "\n"
         << "Enter FILE: ";
    cin >> file_name;

    // Open the text file.
    file_obj.open(file_name, ios::in);
    if (file_obj.fail()) {
      cerr << "File failed to open.\n";
      exit(1);
    }

    // Compute and print result
    min_max = find_min_max_in_file(&file_obj);
    cout << "Smallest integer: " << min_max[0] << '\n'
         << "Largest integer: " << min_max[1] << '\n';

    // Cleanup
    file_obj.close();
    return 0;
  }
#+end_src

*** Sample Output
Suppose the ~31-numbers.txt~ input file contains:

#+begin_example
190
923
480
248
487
896
265
561
638
11
871
848
172
824
792
40
391
149
311
570
#+end_example

The code will output:

#+begin_example
Welcome to Min-Max Program!

Find the smallest and largest integer in FILE.

Enter FILE: 31-numbers.txt
Smallest integer: 11
Largest integer: 923
#+end_example

*** Resources
- https://www.geeksforgeeks.org/return-an-array-in-c/#return-an-array-in-c-using-pointers

** problem32.cpp
Write a program that merges the numbers in two files and writes all the numbers into a third file.  Your program takes input from two different files and writes its output to a third file.  Each input file contains a list of numbers of type ~int~ in sorted order from the smallest to the largest.  After the program is run, the output file will contain all the numbers in the two input files in one longer list in sorted order from smallest to largest.  Your program should define a function that will sort the values of the two input files.

*** Solution
#+begin_src C++
  #include <iostream>
  #include <fstream>
  using namespace std;

  // Implement dynamic lists (lists that grow!)
  struct int_linked_list
  {
    int num;
    struct int_linked_list *next;
  };

  struct int_linked_list *
  initialize_int_linked_list(int num)
  {
    struct int_linked_list *p;
    p = (struct int_linked_list *)malloc(sizeof(struct int_linked_list));

    if (p == NULL)
      throw new runtime_error("Ran out of storage.");

    p->num = num;
    p->next = NULL;

    return p;
  }

  struct int_linked_list *
  add_to_int_linked_list(struct int_linked_list *list_item_ptr, int num)
  {
    struct int_linked_list *new_item = initialize_int_linked_list(num);
    if (list_item_ptr) new_item->next = list_item_ptr;
    return new_item;
  }

  void
  print_int_linked_list(struct int_linked_list *list_item_ptr)
  {
    while (list_item_ptr) {
      cout << list_item_ptr->num << " ";
      list_item_ptr = list_item_ptr->next;
    }
  }

  size_t
  sizeof_int_linked_list(struct int_linked_list *list_item_ptr)
  {
    size_t count = 0;
    while (list_item_ptr) {
      ++count;
      list_item_ptr = list_item_ptr->next;
    }
    return count;
  }

  void
  free_int_linked_list(struct int_linked_list *list_item_ptr)
  {
    while (list_item_ptr) {
      struct int_linked_list *next_item = list_item_ptr;
      list_item_ptr = list_item_ptr->next;
      free(next_item);
    }
  }

  int *
  int_linked_list_to_array(struct int_linked_list *list_item_ptr, size_t *arrsize)
  {
    size_t i = 0;
    ,*arrsize = sizeof_int_linked_list(list_item_ptr);
    int *arr = (int *)malloc(*arrsize * sizeof(int));
    while (list_item_ptr) {
      arr[i] = list_item_ptr->num;
      ++i;
      list_item_ptr = list_item_ptr->next;
    }
    return arr;
  }

  struct int_linked_list *
  append_int_linked_list(struct int_linked_list *list_item_ptr1,
  		       struct int_linked_list *list_item_ptr2)
  {
    if (!list_item_ptr1 || !list_item_ptr2) {
      throw runtime_error("Passed null pointer.");
    }
    struct int_linked_list *first_elt_ptr = list_item_ptr1;
    while (list_item_ptr1->next) {
      list_item_ptr1 = list_item_ptr1->next;
    }
    list_item_ptr1->next = list_item_ptr2;
    return first_elt_ptr;
  }

  void
  swap(int *a, int*b)
  {
    int temp = *a;
    ,*a = *b;
    ,*b = temp;
  }

  void
  bubble_sort(int *arr, size_t n)
  {
    for (size_t i = 0; i < n - 1; ++i) {
      for (size_t j = 0; j < n - i - 1; ++j) {
        if (arr[j] > arr[j+1]) {
  	swap(arr+j, arr+j+1);
        }
      }
    }
  }

  void
  merge_sort_and_dump_files_of_ints(fstream *file1_obj,
  				  fstream *file2_obj,
  				  fstream *file3_obj)
  {
    struct int_linked_list *file1_values = NULL;
    struct int_linked_list *file2_values = NULL;
    struct int_linked_list *file3_values = NULL;
    size_t file3_arrsize;
    int num;

    while (*file1_obj >> num)
      file1_values = add_to_int_linked_list(file1_values, num);
    while (*file2_obj >> num)
      file2_values = add_to_int_linked_list(file2_values, num);

    file3_values = append_int_linked_list(file1_values, file2_values);
    int *file3_array = int_linked_list_to_array(file3_values, &file3_arrsize);
    bubble_sort(file3_array, file3_arrsize);

    for (size_t i = 0; i < file3_arrsize; ++i) {
      ,*file3_obj << file3_array[i] << '\n';
    }

    free_int_linked_list(file3_values);
  }

  int
  main ()
  {
    fstream file_obj_1;
    fstream file_obj_2;
    fstream file_obj_3;
    string file_name_1;
    string file_name_2;
    string file_name_3;

    cout << "Welcome to Files of Integers Merger Program!\n"
         << "\n"
         << "Merge sorted numbers from FILE1 and FILE2.\n"
         << "Output is dumped on FILE3 in ascending order."
         << "\n\n";

    // Open the text file 1 for reading.
    cout << "Enter file name of FILE1: ";
    cin >> file_name_1;		// Prompt for text file for reading.
    file_obj_1.open(file_name_1, ios::in);
    if (file_obj_1.fail()) {
      cerr << "'" << file_name_1 << "' for reading failed to open.\n";
      exit(1);
    }

    // Open the text file 2 for reading.
    cout << "Enter file name of FILE2: ";
    cin >> file_name_2;		// Prompt for text file for reading.
    file_obj_2.open(file_name_2, ios::in);
    if (file_obj_2.fail()) {
      cerr << "'" << file_name_2 << "' for reading failed to open.\n";
      exit(2);
    }

    // Open the text file 3 for writing.
    cout << "Enter file name of FILE3: ";
    cin >> file_name_3;		// Prompt for text file for reading.
    file_obj_3.open(file_name_3, ios::out);
    if (file_obj_3.fail()) {
      cerr << "'" << file_name_3 << "' for writing failed to open.\n";
      exit(3);
    }

    // Notify user if done!
    merge_sort_and_dump_files_of_ints(&file_obj_1, &file_obj_2, &file_obj_3);
    cout << "\nDone! Please Check the file '"
         << file_name_3 << "'.\n";

    // Cleanup
    file_obj_1.close();
    file_obj_2.close();
    file_obj_3.close();
    
    return 0;
  }
#+end_src

*** Sample Output

Suppose ~problem-32-numbers-1.txt~ contains:

#+begin_example
29
50
63
25
77
#+end_example

And ~problem-32-numbers-2.txt~ contains:

#+begin_example
22
21
34
75
89
#+end_example

When run:

#+begin_example
Welcome to Files of Integers Merger Program!

Merge sorted numbers from FILE1 and FILE2.
Output is dumped on FILE3 in ascending order.

Enter file name of FILE1: problem-32-numbers-1.txt
Enter file name of FILE2: problem-32-numbers-2.txt
Enter file name of FILE3: problem-32-output.txt

Done! Please Check the file 'problem-32-output.txt'.
#+end_example

The code will create a file named ~problem-32-output.txt~ containing these values:

#+begin_example
21
22
25
29
34
50
63
75
77
89
#+end_example

*** Resources
- https://www.geeksforgeeks.org/bubble-sort-algorithm/

** problem33.cpp
Write a program to compute numeric grades for a course.  The course records are in a file that will serve as the input file.  The input file is in the following format: Each line contains a student’s last name, then one space, then the student’s first name, then one space, then ten quiz scores all on one line.  The quiz scores are whole numbers and are separated by one space.  Make a list of 10 students in the input file.  Your program will take its input from this file and send its output to a second file.  The data in the output file will be the same as the data in the input file except that there will be one additional number (of type double ) at the end of each line.  This number will be the average of the student’s ten quiz scores.  Write a function that computes the average of each individual student.

** problem34.cpp
Create a program to read a file (~data.txt~) with a set of numbers then the program will determine the odd numbers and even numbers in the file.  Print the odd numbers in the file called ~odd.txt~ and even numbers in the file called ~even.txt~.

** problem35.cpp
Boardman College maintains two files—one for Sociology majors and another for Anthropology majors.  Each file contains students’ ID numbers, last names, first names, and grade point averages.  Each file is in student ID number order.

The college is merging the two departments into a Department of Sociology and Anthropology.  Design the logic for a program that merges the two files into one file containing a list of all students, maintaining ID number order.

** problem36.cpp
The Apgar Medical group keeps a patient file for each doctor in the office.  Each record contains the patient’s first and last name, home address, and birth year.  The records are sorted in ascending birth year order.  Two doctors, Dr.  Best and Dr.  Cushing, have formed a partnership.

Create a program that produces a file of merged list of patients’ names in ascending order by birth year.

Create another file that it does not display patients’ names, but only produces a count of the number of patients born each year.

** problem37.cpp
The MartinWeight Loss Clinic maintains a patient file, each record contains the name of a patient, its gender and current total weight loss in pounds.

Create a function that separates the client file to produce two files — one for male clients and one for female clients.

Each file is in descending weight loss order.

** problem38.cpp
Create a file containing the following names, Social Security numbers, hourly rate, and hours worked.

| Eddie Vedder  | 555-98-4182 | 7.32 | 37 |
| Scott Weiland | 555-53-2147 | 8.32 | 40 |
| Axl Rose      | 555-32-9826 | 6.54 | 40 |
| Phil Anselmo  | 555-09-4263 | 9.80 | 35 |

Write a C++ program that reads the data file and computes and displays a payroll schedule.  The output should list the Name, Social Security Number and Gross pay for every individual.
