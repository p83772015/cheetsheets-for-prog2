* Pop Quiz 1-5
** Pop Quiz 1
Q: What happens if you call ~in_file.open("")~?

A: If you pass an empty string as the first argument of ~open()~, the file opening will fail and will return ~true~ if you call its ~fail()~ method.
*** To Illustrate
#+begin_src c++
  #include <iostream>
  #include <fstream>
  using namespace std;

  int
  main ()
  {
    fstream in_file;
    in_file.open("", ios::out);
    if (in_file.fail()) {
      cerr << "File failed to open.\n";
      exit(1);
    }
    in_file << "Hi Sir!\n";
    in_file.close();
    return 0;
  }
#+end_src
will output:
#+begin_src
  File failed to open.
#+end_src
** Pop Quiz 2
Q: What is wrong with the following code?
#+begin_src c++
  ifstream out_file;
  out_file.open("output.txt");
  out_file << "Hello, World!" << end;
#+end_src
A: The code attempts to write the string ~"Hello, World"~ to an ~ifstream~ object.  Objects created using ~ifstream~ are read-only; it does not allow writing.
*** To Illustrate
The code below:
#+begin_src c++
  #include <iostream>
  #include <fstream>
  using namespace std;

  int
  main ()
  {
    ifstream out_file;

    out_file.open("output.txt");
    out_file << "Hello, World!" << endl;

    return 0;
  }

#+end_src
fails when compiled.
#+begin_src
  pop-quiz-2.cpp: In function ‘int main()’:
  pop-quiz-2.cpp:11:12: error: no match for ‘operator<<’ (operand types are ‘std::ifstream’ {aka ‘std::basic_ifstream<char>’} and ‘const char [14]’)
     11 |   out_file << "Hello, World!" << endl;
        |   ~~~~~~~~ ^~ ~~~~~~~~~~~~~~~
        |   |           |
        |   |           const char [14]
        |   std::ifstream {aka std::basic_ifstream<char>}
#+end_src
An ~ifstream~ object doesn't accept the ~<<~ operator.
** Pop Quiz 3
Q: Suppose the input stream contains the characters ~6,995.0~.  What is the value of ~number~ and ~ch~ after these statements?
#+begin_src c++
  int number;
  char ch;
  in_file >> number;
  in_file.get(ch);
#+end_src

A: After runnining the statements, the values of ~number~ and ~ch~ are the integer ~6~ (six) and the character ~,~ (colon).
*** To Illustrate
The code below,
#+begin_src c++
  #include <iostream>
  #include <fstream>
  using namespace std;

  int
  main ()
  {
    fstream in_file;

    in_file.open("pop-quiz-3-text", ios::in);
    if (in_file.fail()) {
      cerr << "File failed to open.\n";
      exit(1);
    }

    int number;
    char ch;
    in_file >> number;
    in_file.get(ch);

    cout << "number: " << number << '\n';
    cout << "ch: " << ch << '\n';
    return 0;
  }

#+end_src
prints
#+begin_src
  number: 6
  ch: ,
#+end_src
** Pop Quiz 4
Q: Suppose you are writing a program that uses a stream called ~fin~, which will be connected to an input file, and a stream called ~fout~, which will be connected to an input file.

- How do you declare ~fin~ and ~fout~?
- What include directive, if any, do you need to place in your program file?

A:

- ~ifstream fin;~.
- ~ofstream fout;~.
- ~#include <fstream>~
** Pop Quiz 5
Q: A programmer has read half of the lines in a file.  What must the programmer do to the file to enable reading the first line a second time?

A: After reading the first line, the programmer must invoke ~in_file.seekg(0)~ to position the cursor back into the beginning of file.
*** To Illustrate
Suppose a text file named ~pop-quiz-5.txt~ contains the text:
#+begin_src
  A line of text.
  Another line of text.
#+end_src
This code:
#+begin_src c++
  #include <iostream>
  #include <fstream>
  using namespace std;

  int
  main ()
  {
    fstream in_file;
    char ch;

    // Open the text file.
    in_file.open("pop-quiz-5.txt", ios::in);
    if (in_file.fail()) {
      cerr << "File failed to open.\n";
      exit(1);
    }

    // Read until first newline.
    while (! in_file.eof()) {
      in_file.get(ch);	   // Get the character on cursor; advance it.
      cout << ch;		   // Display the character.
      if (ch == '\n') break; // Break out if ch is a newline.
    }

    // Position the cursor back into the beginning of file.
    in_file.seekg(0);

    // Read until first newline.
    while (! in_file.eof()) {
      in_file.get(ch);	   // Get the character on cursor; advance it.
      cout << ch;		   // Display the character.
      if (ch == '\n') break; // Break out if ch is a newline.
    }

  }

#+end_src
prints
#+begin_src
  A line of text.
  A line of text.
#+end_src
